"""Homework for 26.04.2022."""

# TODO: домашка до вторника 26.04.2022
#  0. Обязательно к прочтению Дзен python.
#  1. Создать несколько функций на проверку введённых данных:
#  - Проверка имени
#  - Проверка возраста
#  Функции должны возвращать строку с ошибкой. Если функции вернули ошибки, нужно вывести пользователю ошибки.
#  2. Улучшить проверку имени: в имени допускается только 1 пробел.
#  3. Сделать совет по получению или замене паспорта (эта задача больше не является со звездочкой) в отдельной функции,
#  которая возвращает строку с советом или ничего не возвращает.
#  4. Создать функцию main, в которой будут вызовы всех остальных функций, ввод данных и прочее.
#  5. Создать цикл до тех пор, пока пользователь не введёт верные данные без ошибок.
#  6. Создать функцию, которая очищает введённые данные от лишних пробелов в начале и в конце строки.
#  7. Все функции должны иметь документацию (docstring) (вспоминаем второй урок) и аннотации.
#  И по классике — ограничения:
#  - Разрешается использовать только два раза print.
#  - Нельзя использовать глобальные переменные.


import re


def validate_name(name: str) -> str:
    """
    Функция validate_name выполняет проверку введенного пользователем имени.
    Если имя прошло все проверки, функция возвращает пустую строку.
    - первой выполняется проверка на пустое имя (нажатие Enter).
    - проверка на количество пробелов (не может быть больше одного пробела).
    - проверка на пустое имя (пробелы).
    - проверка на количество символов.
    :param name: str
    :return: str
    """
    spaces = re.findall(r' ', name)
    if not name:
        return 'Ошибка: Пустое имя (Enter).'
    if len(spaces) > 1:
        return 'Ошибка: В имени не может быть больше одного пробела'
    if str.isspace(name):
        return 'Ошибка: Пустое имя (пробелы).'
    if len(name) < 3:
        return 'Ошибка: В имени не может быть менее 3 символов.'
    return ''


def validate_age(age: int) -> str:
    """
    Функция validate_age принимает целое число, введенное пользователем (возраст).
    Если возраст прошел все проверки, функция возвращает пустую строку.
    - выполняется проверка на отрицательность возраста.
    - выполняется проверка на минимальный возраст - 14.
    :param age: int
    :return: str
    """
    if age <= 0:
        return 'Ошибка: Возраст не может быть 0 или отрицательным числом'
    if age < 14:
        return 'Ошибка: Минимальный возраст — 14 лет.'
    return ''


def validate_age_passport(age: int) -> str:
    """
    Функция validate_age_passport принимает целое число.
    Выполняется проверка на возраст 16, 17, 25, 26, 45, 46,
    если возраст попадает в эти значения,
    то возвращает строку с предложением сменить паспорт.
    :param age: int
    :return: str(passport_age)
    """
    passport_age = ''
    if age == 16 or age == 17:
        passport_age += f'Не забудь получить первый паспорт по достижению {age} лет.'
    if age == 25 or age == 26:
        passport_age += f'Не забудь заменить паспорт по достижению {age} лет.'
    if age == 45 or age == 46:
        passport_age += f'Не забудь второй раз заменить паспорт по достижению {age} лет.'
    return passport_age


def spaces_name(name: str) -> str:
    """
    Функция очищает имя от лишних пробелов.
    Принимает строку, отдает также строку.
    :param name: str
    :return: str
    """
    name = name.strip()
    name = re.sub(r"\s+", " ", name)
    return name


def main():
    """
    Функция main запускает в цикле пользовательский ввод name(имени) и age(возраста),
    пока не будут введены корректные данные.
    Вызывает функиции проверок validate_name, validate_age, validate_age_passport.
    Вызывает функцию spaces_name, которая очищает от пробелов.
    Если данные введены некорректно, выводит ошибку и просит ввести данные заново.
    Если все данные корректны, выводит приветствие с именем и возрастом
    и, если необходимо, с напоминанием заменить или получить паспорт.
    """
    while True:
        name = input('Введите Ваше имя: ')
        age = int(input('Введите Ваш возраст: '))
        if validate_name(name) == '' and validate_age(age) == '':
            user_output = f'Привет, {spaces_name(name).title()}. Тебе {age} лет! {validate_age_passport(age)}'
            print(f'{user_output}')
            break
        elif not validate_name(name) == '' or not validate_age(age) == '':
            user_output = validate_name(name) + validate_age(age)
            print(f'{user_output}')
            continue
        return


main()

# print()
# print(validate_name.__annotations__)
# print(validate_age.__annotations__)
# print(validate_age_passport.__annotations__)
